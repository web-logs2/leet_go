package 质因子__位运算

/*
题目：
给定一个正整数，检查它的二进制表示是否总是 0、1 交替出现：换句话说，就是二进制表示中相邻两位的数字永不相同。

思路：
位运算 T(1) S(1)
*/
func hasAlternatingBits(n int) bool {
	//将n 和 n>>1 的异或，如果符合条件，那么a的二进制位全是1, (a+1)进位后的二进制表示除了最高进位，其他全是0
	a := n ^ n>>1
	return a&(a+1) == 0
}
